
<%- include("partials/header"); -%>
    <h1>Add Parking</h1>
    <br>
    <form class="" action="/compose" method="post">
      <div class="form-group">
        <label>Title</label>
        <input class="form-control" type="text" name="postTitle" placeholder="Enter a Title">

        <label>Description</label>
        <textarea rows="4" cols="4" class="form-control" type="text" name="postDescription" placeholder="Enter a description"></textarea>


        <label>Address</label>
        <input class="form-control"  id="pac-input" type="text" name="place" placeholder="Enter a location" />

        <label>Type</label>
        <select class="form-control" type="text" name="postType" placeholder="Enter type">
          <option value="Regular"> Regular </option>
          <option value="Disabled"> Disabled</option>
        </select>


        <label>Status</label>
        <select class="form-control" type="text" name="postStatus" placeholder="Enter status">
          <option value="Available"> Available </option>
          <option value="Unavailable"> Unavailable</option>
        </select>


        <label>Price per Hour</label>
        <input class="form-control" type="text" name="postPrice" placeholder="Enter price">

      </div>
      <button class="publish btn btn-lg btn-danger hover-top btn-glow" type="submit" name="button">Publish</button>
    </form>


    <div id="map"></div>
    <div id="infowindow-content">
      <span id="place-name" class="title"></span><br />
      <span id="place-address" ></span>
    </div>


    <script>
      function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
          center: {
            lat: 31.0461,
            lng: -34.8516
          },
          zoom: 13,
          mapTypeControl: false,
        });
        const card = document.getElementById("pac-card");
        const input = document.getElementById("pac-input");
        const biasInputElement = document.getElementById("use-location-bias");
        const strictBoundsInputElement = document.getElementById("use-strict-bounds");
        const options = {
          fields: ["formatted_address", "geometry", "name"],
          strictBounds: false,
          types: ["establishment"],
        };

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

        const autocomplete = new google.maps.places.Autocomplete(input, options);

        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo("bounds", map);

        const infowindow = new google.maps.InfoWindow();
        const infowindowContent = document.getElementById("infowindow-content");

        infowindow.setContent(infowindowContent);

        const marker = new google.maps.Marker({
          map,
          anchorPoint: new google.maps.Point(0, -29),
        });

        autocomplete.addListener("place_changed", () => {
          infowindow.close();
          marker.setVisible(false);

          const place = autocomplete.getPlace();

          if (!place.geometry || !place.geometry.location) {
            // User entered the name of a Place that was not suggested and
            // pressed the Enter key, or the Place Details request failed.
            window.alert("No details available for input: '" + place.name + "'");
            return;
          }

          infowindowContent.children["place-name"].textContent = place.name;
        });



        setupClickListener("changetype-all", []);
        setupClickListener("changetype-address", ["address"]);
        setupClickListener("changetype-establishment", ["establishment"]);
        setupClickListener("changetype-geocode", ["geocode"]);
        setupClickListener("changetype-cities", ["(cities)"]);
        setupClickListener("changetype-regions", ["(regions)"]);
        biasInputElement.addEventListener("change", () => {
          if (biasInputElement.checked) {
            autocomplete.bindTo("bounds", map);
          } else {
            // User wants to turn off location bias, so three things need to happen:
            // 1. Unbind from map
            // 2. Reset the bounds to whole world
            // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
            autocomplete.unbind("bounds");
            autocomplete.setBounds({
              east: 180,
              west: -180,
              north: 90,
              south: -90
            });
            strictBoundsInputElement.checked = biasInputElement.checked;
          }

          input.value = "";
        });
        strictBoundsInputElement.addEventListener("change", () => {
          autocomplete.setOptions({
            strictBounds: strictBoundsInputElement.checked,
          });
          if (strictBoundsInputElement.checked) {
            biasInputElement.checked = strictBoundsInputElement.checked;
            autocomplete.bindTo("bounds", map);
          }

          input.value = "";
        });
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAt1LKSTrft4Q8GXVxhXV9aBXFw3G44jYw&callback=initMap&libraries=places&v=weekly" defer></script>


<%- include("partials/footer"); -%>
